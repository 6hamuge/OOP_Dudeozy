import javax.swing.*; // GUI 컴포넌트를 위해 javax.swing 패키지의 모든 클래스를 임포트
import java.awt.*; // AWT 컴포넌트를 위해 java.awt 패키지의 모든 클래스를 임포트
import java.sql.Connection; // SQL 연결을 위한 Connection 클래스 임포트
import java.sql.DriverManager; // SQL 연결 관리를 위한 DriverManager 클래스 임포트
import java.sql.PreparedStatement; // SQL 문을 위한 PreparedStatement 클래스 임포트
import java.sql.ResultSet; // SQL 쿼리 결과를 담기 위한 ResultSet 클래스 임포트
import java.time.LocalDate; // 날짜 작업을 위한 LocalDate 클래스 임포트
import java.time.temporal.ChronoUnit; // 날짜 차이를 계산하기 위한 ChronoUnit 클래스 임포트
import javax.swing.plaf.FontUIResource; // 커스텀 폰트 설정을 위한 FontUIResource 클래스 임포트

public class DDay { ///// 폰트 설정
   JInternalFrame frame;
    ///////// 틀 만들기 /////////////
    public DDay() {
        // 커스텀 폰트 설정
        setUIFont(new FontUIResource(new Font("Malgun Gothic", Font.PLAIN, 18)));
        Dimension dim = new Dimension(1920, 1080); // 창 크기 설정
        frame = new JInternalFrame("D-day"); // "D-day" 제목의 새로운 JFrame 생성
        frame.setLocation(100, 100); // 창의 초기 위치 설정
        frame.setPreferredSize(dim); // 창의 선호 크기 설정

        JPanel panel = new JPanel(); // 새로운 JPanel 생성
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); // 패널의 레이아웃 설정

        loadDataFromDatabase(panel); // 데이터베이스에서 데이터를 로드하고 패널에 추가

        JScrollPane scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // 세로 스크롤바가 항상 보이도록 스크롤 패널 추가
        frame.add(scrollPane); // 스크롤 패널을 프레임에 추가

        frame.pack(); // 모든 컴포넌트의 크기에 맞춰 창 크기 조정
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 창 닫을 때 프로그램 종료 설정
        frame.setVisible(true); // 창을 보이도록 설정
    }

    //// 데이터베이스에서 데이터 로드 ///////////////
    private static void loadDataFromDatabase(JPanel panel) {
        try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "SYSTEM", "foroopcurie");
             PreparedStatement ps = conn.prepareStatement("SELECT subject, year, month, day, task, completed FROM Schedule")) {
            
            ResultSet rs = ps.executeQuery(); // 쿼리 실행 및 결과 가져오기

            while (rs.next()) {
                String subject = rs.getString("subject"); // subject 컬럼 값 가져오기
                int year = rs.getInt("year"); // year 컬럼 값 가져오기
                int month = rs.getInt("month"); // month 컬럼 값 가져오기
                int day = rs.getInt("day"); // day 컬럼 값 가져오기
                String task = rs.getString("task"); // task 컬럼 값 가져오기
                boolean completed = rs.getString("completed").equals("완료"); // completed 컬럼 값 가져오기

                JPanel dDayPanel = new JPanel(); // 새로운 패널 생성
                dDayPanel.setLayout(new BoxLayout(dDayPanel, BoxLayout.Y_AXIS)); // 패널의 레이아웃 설정

                JCheckBox taskCheckBox = new JCheckBox(task); // 새로운 체크박스 생성
                taskCheckBox.setFont(new Font("Malgun Gothic", Font.PLAIN, 18)); // 체크박스 폰트 설정
                taskCheckBox.setMaximumSize(new Dimension(Integer.MAX_VALUE, taskCheckBox.getPreferredSize().height)); // 체크박스 최대 크기 설정
                taskCheckBox.setSelected(completed); // 완료 여부에 따라 체크박스 선택 상태 설정
                toggleStrikeThrough(taskCheckBox, completed); // 완료 여부에 따라 체크박스 텍스트에 취소선 추가
                taskCheckBox.addActionListener(e -> toggleStrikeThrough(taskCheckBox)); // 체크박스 클릭 시 취소선 토글

                dDayPanel.add(taskCheckBox); // 체크박스를 패널에 추가

                long dDay = calculateDaysUntil(year, month, day);
                String dDayText = (dDay == 0) ? "D-day" : "D-" + dDay;
                dDayPanel.setBorder(BorderFactory.createTitledBorder(subject + " " + dDayText + " / " + month + "." + day));
                panel.add(dDayPanel); // D-day 패널을 메인 패널에 추가
            }
        } catch (Exception e) {
            e.printStackTrace(); // 예외 발생 시 스택 트레이스 출력
        }
    }
    
    public static void setUIFont(FontUIResource f) {
        java.util.Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource) {
                UIManager.put(key, f);
            }
        }
    }
    
    ///////////// D-day 계산하기 ////////////
    private static long calculateDaysUntil(int year, int month, int day) {
        LocalDate targetDate = LocalDate.of(year, month, day); // 목표 날짜 생성
        LocalDate currentDate = LocalDate.now(); // 현재 날짜 가져오기
        return ChronoUnit.DAYS.between(currentDate, targetDate); // 현재 날짜와 목표 날짜 사이의 일수 계산
    }
    
    //////////////////////// 취소선 긋기 //////////
    private static void toggleStrikeThrough(JCheckBox checkBox) {
    	checkBox.addActionListener(e -> {
            boolean completed = checkBox.isSelected();
            String task = checkBox.getText(); // 체크박스의 텍스트는 task 이름으로 가정합니다.

            // 데이터베이스 업데이트 메서드 호출
            updateDatabase(task, completed);
        });
        if (checkBox.isSelected()) {
            checkBox.setText("<html><strike>" + checkBox.getText() + "</strike></html>"); // 체크박스가 선택되었으면 취소선 추가
        } else {
            checkBox.setText(checkBox.getText().replaceAll("<html><strike>", "").replaceAll("</strike></html>", "")); // 선택 해제 시 취소선 제거
        }
    }

    private static void toggleStrikeThrough(JCheckBox checkBox, boolean isCompleted) {
        if (isCompleted) {
            checkBox.setText("<html><strike>" + checkBox.getText() + "</strike></html>"); // 완료 상태이면 취소선 추가
        } else {
            checkBox.setText(checkBox.getText().replaceAll("<html><strike>", "").replaceAll("</strike></html>", "")); // 완료 상태가 아니면 취소선 제거
        }
    }

    private static void updateDatabase(String task, boolean completed) {
        try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "SYSTEM", "foroopcurie");
             PreparedStatement ps = conn.prepareStatement("UPDATE Schedule SET completed = ? WHERE task = ?")) {

            ps.setString(1, completed ? "1" : "0"); // 완료 여부에 따라 "완료" 또는 "미완료" 설정
            ps.setString(2, task); // 업데이트할 task 설정
            ps.executeUpdate(); // 업데이트 실행

        } catch (Exception e) {
            e.printStackTrace(); // 예외 발생 시 스택 트레이스 출력
        }
    }
    
    public JInternalFrame getInternalFrame() {
       return frame;
   }

}
