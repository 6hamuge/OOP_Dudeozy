import javax.swing.*; 
import java.awt.*; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.time.LocalDate; 
import java.time.temporal.ChronoUnit; 
import java.util.ArrayList; 
import java.util.Collections; 
import java.util.Comparator;
import java.util.HashMap; 
import java.util.List; 
import java.util.Map; 
import javax.swing.plaf.FontUIResource;

public class DDay {
    JInternalFrame frame;

    public DDay() {
        setUIFont(new FontUIResource(new Font("Malgun Gothic", Font.PLAIN, 18)));
        Dimension dim = new Dimension(1920, 1080); 
        frame = new JInternalFrame("D-day"); 
        frame.setLocation(100, 100); 
        frame.setPreferredSize(dim);

        JPanel panel = new JPanel(); 
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        loadDataFromDatabase(panel); 

        JScrollPane scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        frame.add(scrollPane);

        frame.pack(); 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        frame.setVisible(true); 
    }

    private static void loadDataFromDatabase(JPanel panel) {
        Map<String, List<ScheduleItem>> scheduleMap = new HashMap<>();

        try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "SYSTEM", "foroopcurie");
             PreparedStatement ps = conn.prepareStatement("SELECT subject, year, month, day, task, importance, completed FROM Schedule")) {

            ResultSet rs = ps.executeQuery(); 

            while (rs.next()) {
                String subject = rs.getString("subject"); 
                int year = rs.getInt("year"); 
                int month = rs.getInt("month"); 
                int day = rs.getInt("day"); 
                String task = rs.getString("task"); 
                int importance = rs.getInt("importance");
                boolean completed = rs.getInt("completed") == 1; 

                LocalDate targetDate = LocalDate.of(year, month, day);
                long dDay = calculateDaysUntil(targetDate);

                ScheduleItem item = new ScheduleItem(subject, targetDate, task, importance, completed);
                String dDayText = (dDay == 0) ? "D-day" : "D-" + dDay;

                scheduleMap.computeIfAbsent(dDayText, k -> new ArrayList<>()).add(item);
            }

            List<Map.Entry<String, List<ScheduleItem>>> entryList = new ArrayList<>(scheduleMap.entrySet());
            Collections.sort(entryList, Comparator.comparingLong(e -> parseDDay(e.getKey())));

            for (Map.Entry<String, List<ScheduleItem>> entry : entryList) {
                List<ScheduleItem> itemList = entry.getValue();
                itemList.sort(Comparator.comparingInt(ScheduleItem::getImportance).reversed());

                for (ScheduleItem item : itemList) {
                    JPanel dDayPanel = new JPanel(); 
                    dDayPanel.setLayout(new BoxLayout(dDayPanel, BoxLayout.Y_AXIS));

                    JCheckBox taskCheckBox = new JCheckBox(item.getTask()); 
                    taskCheckBox.setFont(new Font("Malgun Gothic", Font.PLAIN, 18)); 
                    taskCheckBox.setMaximumSize(new Dimension(Integer.MAX_VALUE, taskCheckBox.getPreferredSize().height));
                    taskCheckBox.setSelected(item.isCompleted());
                    toggleStrikeThrough(taskCheckBox, item.isCompleted());
                    taskCheckBox.addActionListener(e -> toggleStrikeThrough(taskCheckBox));

                    dDayPanel.add(taskCheckBox);

                    dDayPanel.setBorder(BorderFactory.createTitledBorder(item.getSubject() + " " + entry.getKey() + " / " + item.getDate().getMonthValue() + "." + item.getDate().getDayOfMonth()));
                    panel.add(dDayPanel);
                }
            }

        } catch (Exception e) {
            e.printStackTrace(); 
        }
    }

    public static void setUIFont(FontUIResource f) {
        java.util.Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource) {
                UIManager.put(key, f);
            }
        }
    }

    private static long calculateDaysUntil(LocalDate targetDate) {
        LocalDate currentDate = LocalDate.now(); 
        return ChronoUnit.DAYS.between(currentDate, targetDate); 
    }

    private static long parseDDay(String dDayText) {
        if (dDayText.equals("D-day")) return 0;
        return Long.parseLong(dDayText.substring(2));
    }

    private static void toggleStrikeThrough(JCheckBox checkBox) {
        checkBox.addActionListener(e -> {
            boolean completed = checkBox.isSelected();
            String task = checkBox.getText();

            updateDatabase(task, completed);
        });

        if (checkBox.isSelected()) {
            checkBox.setText("<html><strike>" + checkBox.getText() + "</strike></html>");
        } else {
            checkBox.setText(checkBox.getText().replaceAll("<html><strike>", "").replaceAll("</strike></html>", ""));
        }
    }

    private static void toggleStrikeThrough(JCheckBox checkBox, boolean isCompleted) {
        if (isCompleted) {
            checkBox.setText("<html><strike>" + checkBox.getText() + "</strike></html>");
        } else {
            checkBox.setText(checkBox.getText().replaceAll("<html><strike>", "").replaceAll("</strike></html>", ""));
        }
    }

    private static void updateDatabase(String task, boolean completed) {
        try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "SYSTEM", "foroopcurie");
             PreparedStatement ps = conn.prepareStatement("UPDATE Schedule SET completed = ? WHERE task = ?")) {

            ps.setInt(1, completed ? 1 : 0); 
            ps.setString(2, task); 
            ps.executeUpdate(); 

        } catch (Exception e) {
            e.printStackTrace(); 
        }
    }

    private static class ScheduleItem {
        private final String subject;
        private final LocalDate date;
        private final String task;
        private final int importance;
        private final boolean completed;

        public ScheduleItem(String subject, LocalDate date, String task, int importance, boolean completed) {
            this.subject = subject;
            this.date = date;
            this.task = task;
            this.importance = importance;
            this.completed = completed;
        }

        public String getSubject() {
            return subject;
        }

        public LocalDate getDate() {
            return date;
        }

        public String getTask() {
            return task;
        }

        public int getImportance() {
            return importance;
        }

        public boolean isCompleted() {
            return completed;
        }
    }

    public JInternalFrame getInternalFrame() {
        return frame;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(DDay::new);
    }
}
